<?php
/**
 * @file
 */

/*
Plugin Name: Mirror As You Link
Plugin URI: http://mirrorasyoulink.org
Description: Creates a [cite] shortcode that mirrors web pages that you link to, so their content is not lost.
Version: 1.1
Author: Dan Margo, Victor Shnayder
Author URI: http://www.eecs.harvard.edu/~shnayder/
License: GPL2
*/

/*
 * This program is free software; you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation; version 2 of the License.
 *  
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 *  
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * @author Victor Shnayder (shnayder seas.harvard.edu)
 * @author Dan Margo (dmargo eecs.harvard.edu)
 *
 */

/**
 * @TODO
 *
 * Implement a text filter that parses [mirror] [/mirror] tags. On pre_save, actually
 * mirror the content linked to. On display, rewrite the tag to actual links and (optionally)
 * append the MAYL icon
 */

/**
 * Implements hook_menu().
 */
function mayl_menu() {
  $items['admin/config/content/mayl'] = array(
    'title' => t('Mirror As You Link'),
    'description' => t('Configure Mirror As You Link settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mayl_admin_settings'),
    'access arguments' => array('administer mayl'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'mayl.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function mayl_permission() {
  return array(
    'administer mayl' => array(
      'title' => t('Administer MAYL settings'),
      'restricted access' => TRUE,
    ),
  );
}

/**
 * Implements hook_filter_info().
 */
function mayl_filter_info() {
  return array(
    'mayl' => array(
      'title' => t('Mirror As You Link'),
      'decription' => t(''),
      'process callback' => 'mayl_filter_process',
      'tips callback' => 'mayl_filter_tips',
    ),
  );
}

/**
 * Filter tips callback.
 */
function mayl_filter_tips($filter, $format, $long = FALSE) {
  return t('Process all links wrapped in [mirror] tags and provide links to locally mirrored copies of the linked content.');
}

/**
 * Filter callback.
 *
 * Process [mirror] tags.
 */
function mayl_filter_process($text, $filter) {
  global $log, $mirrored_css_class, $mirror_css_class, $mayl_icon;

  debug(__FUNCTION__);

  $pregs = array(
    '#\[mirror href=([\w:;&,%+~!=@\/\.\-\#\?]+?)\](.*?)\[/mirror\]#si' => '<a href="\\1" class="mirrored" title="Mirror of \\1\">\\2</a>',
    '#\[mirror\](.*?)\[/mirror\]#si' => '<a href="\\1" class="mirrored" title="Mirror of \\1\">\\1</a>',
  );

  return preg_replace(array_keys($pregs), array_values($pregs), $text);

/*
    $ret .= ' <span class="error">cite error: Apache does not have write permissions on mirror directory.</span>';
  else if ($mirror_url === MIRROR_ERROR_INVALID)
    $ret .= " <span class=\"error\">cite error: Invalid URL '$href'</span>";
  else
    $ret .= " <a href=\"$mirror_url\" class=\"$mirror_css_class\" title=\"Mirror of $href\">$mayl_icon</a>";
*/

  return $text;
}

/**
 * Implements hook_entity_presave().
 *
 * Find all links that aren't already mirrored / mirrors (using css class),
 * and mirror them.
 */
function mayl_entity_presave($entity, $type) {
  $fields = field_info_fields();

  // Endless loops.
  foreach ($fields as $field) {
    if ($field['type'] == 'text_long' || $field['type'] == 'text_with_summary') {
      if (isset($entity->{$field['field_name']}) ){
        foreach ($entity->{$field['field_name']} as $langcode => $items) {
          foreach ($items as $delta => $item) {

            // Grab the field value and find the links via simplehtmldom.
            $value = $entity->{$field['field_name']}[$langcode][$delta]['value'];
            mayl_mirror_links($value);

            if ($field['type'] == "text_with_summary") {
              $summary = $entity->{$field['field_name']}[$langcode][$delta]['summary'];
              mayl_mirror_links($summary);
            }
          }
        }
      }
    }
  }

  return;
}

/**
 * Helper to mirror links.
 *
 * @param $html
 *   An HTML string.
 */
function mayl_mirror_links($html) {

  debug(__FUNCTION__);

  if (empty($html)) {
    return;
  }

  $mirror_class = variable_get('mayl_mirror_css_class', 'mirror');
  $href_class   = variable_get('mayl_href_css_class', 'mirrored');

  $pregs = _mayl_pregs();

  foreach (array_keys($pregs) as $preg) {
    $count = preg_match_all($preg, $html, $matches, PREG_SET_ORDER);

    foreach ($matches as $match) {
      // In theory the $absolute=TRUE param ensures we only process remote URLs.
      if (!valid_url($match[1], TRUE)) {
        debug('Not valid');
        debug($match);
        continue;
      }

      module_load_include('inc', 'mayl', 'mayl.mirror');
      $mid = mayl_create_mirror($match[1]);

      if ($mid === FALSE) {
        drupal_set_message(t('Unable to mirror %url', array('%url' => $match[1])));
      }
    }
  }

  // Really, just return. We do the rewriting in the filter.
  return;
}

/**
 * Helper to check for wget on the server.
 */
function _mayl_admin_wget_check($form_element) {
  $path = $form_element['#value'];
  if (strlen($path) == 0) {
    return $form_element;
  }

  if (!file_exists($path)) {
    // If the file does not exist.
    form_set_error($form_element['#parents'][0], t('The path %path does not exist.', array('%path' => $path)));
  }

  if (!is_executable($path)) {
    // If the file is not executable.
    form_set_error($form_element['#parents'][0], t('The path %path is not executable.', array('%path' => $path)));
  }

  return $form_element;
}


/**
 * Helper that returns the pregs we use.
 */
function _mayl_pregs() {
  return array(
    '#\[mirror href=(.*?)[\ ?]\](.*?)\[/mirror\]#si' => '<a href="\\1" class="mirrored" title="Mirror of \\1\">\\2</a>',
    '#\[mirror\](.*?)\[/mirror\]#si' => '<a href="\\1" class="mirrored" title="Mirror of \\1\">\\1</a>'
  );
}

/**
 * Return mirror URL for a source URL.
 */
function _mayl_mirror_url($url) {
  return db_select('mayl_mirrors', 'm')->fields('m', array('host_url'))->fetchField();
}
